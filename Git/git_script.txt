
# 前回のコミットから変更をファイル単位で見る
git diff  --name-only HEAD~3..HEAD  （ファイル単位で出力）
git diff  --stat HEAD~3..HEAD  （ファイル単位尚且修正行数が表示される）

# コミット間の変更を特定のフォルダだけ見る
git diff  --name-only HEAD~3..HEAD  --relative=BCTK001

# 前回のコミットから変更があるファイルのみ抽出して、ZIPファイルを作成
git archive --format=zip   HEAD←出力するrevision `git diff --diff-filter=d --name-only HEAD~1..HEAD` -o archive_20190729_new.zip

# 前回のコミットにもう一度コミットする
git commit --amend --no-edit

# git addしたものを取り消す
git reset .

# ブランチを作成同時に、そのブランチに切り替える
git checkout -b develop

# ブランチをマージする(いつもマージがある部分がわかるようにする)
git merge --no-ff develop  ←取り込みたいブランチを指定

# ブランチを試してマージしてみる
git merge --no-commit --no-ff develop  ←取り込みたいブランチを指定
# 実行結果をみて、confilictがなければOK
# 現在マージ状態なので、とりあえず取り消し
git merge --abort

# ブランチを比較
git diff master..develop


# タグをつける
git tag -a original -m "修正前のソース"  f26ea96  ←コミット値
# タグ一覧を表示する
git tag  --sort=-taggerdate --format='%(taggerdate:short) [%(tag)]   %(subject)'
# タグを削除
git tag -d TAG_NAME

# 過去のコミットのコメントを修正する
git rebase -i HEAD~2 　←　修正したいコミットまでのoffset + 1

途中でやめたい場合は、git rebase --abort

# rebaseを過去に戻したい
git reflog ←　コミット履歴確認用
git reset --hard HEAD@{4} 　←一般的にはこれを使う
git reset --hard ORIG_HEAD ←rebase直後に使える

# 特定ファイルの過去3回分のログを見たい
git log -n 3 -p AA/BB.txt

# コミット履歴でどれくらいのファイルが変更したかを見たい
git diff HEAD~3..HEAD --name-only

# リモートレポジトリの一覧を取得する
git remote -v

# リモートレポジトリの最新を取得する
git fetch

# リモートレポジトリとローカルリポジトリの差分を確認する
git diff HEAD..FETCH_HEAD

# ローカルリポジトリの変更をリモートのoriginリポジトリとmasterタグに反映する。
git push origin master


# **hotfixブランチ
製品のリリース時には、時として重大な不具合が見つかる場合があります。みなさんも経験があるのではないでしょうか？

そんなときには、master ブランチから直接 hotfix
ブランチを切って緊急の修正を行いましょう。修正完了後に master ブランチと develop
ブランチにマージして、リリースタグ（マイナーバージョンなど）をうちます。その後、hotfix
ブランチは削除します。派生元が master になるだけで、操作的には release
ブランチと同様です。

# masterブランチの途中からhotfixを切る
git logg  <- コミット一覧を見る
git checkout -b hotfix 7f7798e  <-  新しいブランチhotfixを特定のコミットから切る

# 現在開いているブランチの名前を変更
git branch -m newBranchName

# ブランチを削除
git branch --delete hotfix
